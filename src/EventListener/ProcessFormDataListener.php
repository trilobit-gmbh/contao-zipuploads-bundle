<?php

declare(strict_types=1);

/*
 * @copyright  trilobit GmbH
 * @author     trilobit GmbH <https://github.com/trilobit-gmbh>
 * @license    LGPL-3.0-or-later
 */

namespace Trilobit\ZipuploadsBundle\EventListener;

use Contao\Config;
use Contao\CoreBundle\ContaoCoreBundle;
use Contao\Database;
use Contao\Date;
use Contao\Dbafs;
use Contao\File;
use Contao\FilesModel;
use Contao\StringUtil;
use Contao\System;
use Contao\ZipWriter;

class ProcessFormDataListener
{
    /**
     * @param $arrSubmitted
     * @param $arrData
     * @param $arrFiles
     * @param $arrLabels
     * @param $that
     *
     * @throws \Exception
     */
    public function __invoke(&$arrSubmitted, $arrData, $arrFiles, $arrLabels, $that)
    {
        if (empty($arrData['zipUploadedFiles'])) {
            return false;
        }

        $time = time();

        $rootDir = System::getContainer()->getParameter('kernel.project_dir');
        $strExtension = 'zip';
        $version = (method_exists(ContaoCoreBundle::class, 'getVersion') ? ContaoCoreBundle::getVersion() : VERSION);

        $fields = Database::getInstance()
            ->prepare("SELECT * FROM tl_form_field WHERE pid=? AND type=? AND invisible='' ORDER BY sorting")
            ->execute($arrData['id'], 'fineUploader')
        ;

        while ($fields->next()) {
            if (isset($arrSubmitted[$fields->name]) && !empty($arrSubmitted[$fields->name])) {
                if (\is_string($arrSubmitted[$fields->name])) {
                    $uploads = [$arrSubmitted[$fields->name]];
                } else {
                    $uploads = $arrSubmitted[$fields->name];
                }

                foreach ($uploads as $key => $value) {
                    if (null !== $fields->addToDbafs && $fields->addToDbafs) {
                        $value = FilesModel::findByUuid($value)->path;
                    }

                    if (!is_file($rootDir.'/'.$value)) {
                        continue;
                    }

                    $pathParts = pathinfo($value);

                    $arrFiles[$fields->name.'_'.$key] = [
                        'name' => $pathParts['basename'],
                        'tmp_name' => $rootDir.'/'.$value,
                        'error' => 0,
                        'size' => filesize($rootDir.'/'.$value),
                        'uploaded' => (version_compare($version, '5.0', '>=')) ? true : 1,
                    ];
                }
            }
        }

        // Prepare simple tokens
        $arrTokens = [
            'rand' => uniqid('', true),
            'date' => Date::parse(Config::get('dateFormat'), $time),
            'time' => Date::parse(Config::get('timeFormat'), $time),
            'datim' => Date::parse(Config::get('datimFormat'), $time),
        ];

        if (empty($arrFiles)) {
            $arrSubmitted['autogeneretedZippedUploads'] = '';
            $arrSubmitted['autogeneratedZippedUploads'] = '';

            return false;
        }

        foreach ($arrSubmitted as $key => $value) {
            if (\is_array($value)) {
                $arrTokens['form_'.$key] = implode(',', $value);
            } else {
                $arrTokens['form_'.$key] = $value;
            }
        }

        // Set zip file name
        if (version_compare($version, '5.0', '>=')) {
            $strFilename = StringUtil::generateAlias(System::getContainer()->get('contao.string.simple_token_parser')->parse(StringUtil::decodeEntities(
                $arrData['zipFilename']
            ), $arrTokens));
        } else {
            $strFilename = StringUtil::generateAlias(
                StringUtil::parseSimpleTokens(
                    StringUtil::decodeEntities(
                        $arrData['zipFilename']
                    ), $arrTokens
                )
            );
        }

        // Set upload folder
        $objUploadFolder = FilesModel::findByUuid($arrData['zipDestinationFolder']);

        // The upload folder could not be found
        if (null === $objUploadFolder) {
            throw new \Exception('Invalid upload folder ID '.$arrData['zipDestinationFolder']);
        }

        $strUploadFolder = $objUploadFolder->path;

        // Do not overwrite existing files
        if (!empty($arrData['zipDoNotOverwrite']) && file_exists($rootDir.'/'.$strUploadFolder.'/'.$strFilename.'.'.$strExtension)) {
            $offset = 1;

            $arrTmpAll = scan($rootDir.'/'.$strUploadFolder);
            $arrTmpFiles = preg_grep('/^'.preg_quote($strFilename, '/').'.*\.'.preg_quote($strExtension, '/').'/', $arrTmpAll);

            foreach ($arrTmpFiles as $strTmpFile) {
                if (preg_match('/__[0-9]+\.'.preg_quote($strExtension, '/').'$/', $strTmpFile)) {
                    $strTmpFile = str_replace('.'.$strExtension, '', $strTmpFile);
                    $intValue = (int) substr($strFilename, (strrpos($strTmpFile, '_') + 1));

                    $offset = max($offset, $intValue);
                }
            }

            $strFilename = str_replace($strFilename, $strFilename.'__'.++$offset, $strFilename);
        }

        // Set zip

        // use php zip ext because of problems with umlauts and other special characters in zipped files with the contao zipwriter
        $objZip =  new \ZipArchive();
        //$objZip = new ZipWriter($strUploadFolder.'/'.$strFilename.'.'.$strExtension);

        if (true !== $objZip->open($rootDir.'/'.$strUploadFolder.'/'.$strFilename.'.'.$strExtension, \ZipArchive::CREATE)) {
            throw new \Exception('Cannot open '.$rootDir.'/'.$strUploadFolder.'/'.$strFilename.'.'.$strExtension);
        }

        var_dump($rootDir.'/'.$strUploadFolder.'/'.$strFilename.'.'.$strExtension);

        foreach ($arrFiles as $value) {
            if (\is_array($value)
                && isset($value['uploaded']) && $value['uploaded']
                && isset($value['error']) && 0 === $value['error']
                && isset($value['size']) && 0 < $value['size']
                && isset($value['tmp_name']) && file_exists($value['tmp_name'])
            ) {
                /*
                $objZip->addFile(
                    str_replace($rootDir.'/', '', $value['tmp_name']),
                    mb_convert_encoding(utf8_decode($value['name']), 'ISO-8859-1', 'UTF-8')
                );

                if (!empty($arrData['zipDeleteUploadsAfterZip'])) {
                    unlink($value['tmp_name']);
                }
                */

                $objZip->addFile(
                    $value['tmp_name'],
                    $value['name']
                );
            }
        }

        $objZip->close();

        if (!empty($arrData['zipDeleteUploadsAfterZip'])) {
            foreach ($arrFiles as $value) {
                unlink($value['tmp_name']);
            }
        }

        $zipFile = new File($strUploadFolder.'/'.$strFilename.'.'.$strExtension);
        $zipFile->chmod(0666 & ~umask());

        Dbafs::addResource($strUploadFolder.'/'.$strFilename.'.'.$strExtension);

        // Append new field with zip-file data
        $arrSubmitted['autogeneretedZippedUploads'] = $strUploadFolder.'/'.$strFilename.'.'.$strExtension;
        $arrSubmitted['autogeneratedZippedUploads'] = $strUploadFolder.'/'.$strFilename.'.'.$strExtension;

        return false;
    }
}
