<?php

declare(strict_types=1);

/*
 * @copyright  trilobit GmbH
 * @author     trilobit GmbH <https://github.com/trilobit-gmbh>
 * @license    LGPL-3.0-or-later
 */

namespace Trilobit\ZipuploadsBundle\EventListener;

use Contao\Config;
use Contao\CoreBundle\ContaoCoreBundle;
use Contao\Database;
use Contao\Date;
use Contao\Dbafs;
use Contao\File;
use Contao\FilesModel;
use Contao\Folder;
use Contao\Form;
use Contao\StringUtil;
use Contao\System;

#[\AllowDynamicProperties] class ProcessFormDataListener
{
    public function __construct(\Terminal42\NotificationCenterBundle\NotificationCenter|null $notificationCenter)
    {
        $this->notificationCenter = $notificationCenter;
    }

    /**
     * @throws \Exception
     */
    public function __invoke(array &$submittedData, array $formData, array|null &$files, array $labels, Form $form)
    {
        if (empty($formData['zipUploadedFiles'])) {
            return false;
        }

        $time = time();

        $submittedData['autogeneratedZippedUploads']
            = $submittedData['autogeneretedZippedUploads']
            = $submittedData['autogeneratedZippedUploadsFile']
            = $submittedData['autogeneretedZippedUploadsFile']
            = '';

        $container = System::getContainer();
        $rootDir = $container->getParameter('kernel.project_dir');
        $extension = 'zip';
        $version = (method_exists(ContaoCoreBundle::class, 'getVersion') ? ContaoCoreBundle::getVersion() : VERSION);

        $fields = Database::getInstance()
            ->prepare("SELECT * FROM tl_form_field WHERE pid=? AND type=? AND invisible='' ORDER BY sorting")
            ->execute($formData['id'], 'fineUploader')
        ;

        while ($fields->next()) {
            if (isset($submittedData[$fields->name]) && !empty($submittedData[$fields->name])) {
                if (\is_string($submittedData[$fields->name])) {
                    $uploads = [$submittedData[$fields->name]];
                } else {
                    $uploads = $submittedData[$fields->name];
                }

                foreach ($uploads as $key => $value) {
                    if (null !== $fields->addToDbafs && $fields->addToDbafs) {
                        $value = FilesModel::findByUuid($value)->path;
                    }

                    if (!is_file($rootDir.'/'.$value)) {
                        continue;
                    }

                    $pathParts = pathinfo($value);

                    $files[$fields->name.'_'.$key] = [
                        'name' => $pathParts['basename'],
                        'tmp_name' => $rootDir.'/'.$value,
                        'error' => 0,
                        'size' => filesize($rootDir.'/'.$value),
                        'uploaded' => (version_compare($version, '5.0', '>=')) ? true : 1,
                    ];
                }
            }
        }

        // Prepare simple tokens
        $tokens = [
            'rand' => uniqid('', true),
            'date' => Date::parse(Config::get('dateFormat'), $time),
            'time' => Date::parse(Config::get('timeFormat'), $time),
            'datim' => Date::parse(Config::get('datimFormat'), $time),
        ];

        if (empty($files)) {
            return false;
        }

        foreach ($submittedData as $key => $value) {
            if (\is_array($value)) {
                $tokens['form_'.$key] = implode(',', $value);
            } else {
                $tokens['form_'.$key] = $value;
            }
        }

        // Set zip file name
        if (version_compare($version, '5.0', '>=')) {
            $zipFilename = StringUtil::generateAlias(
                $container
                    ->get('contao.string.simple_token_parser')
                    ->parse(StringUtil::decodeEntities($formData['zipFilename']), $tokens)
            );
        } else {
            $zipFilename = StringUtil::generateAlias(
                StringUtil::parseSimpleTokens(
                    StringUtil::decodeEntities(
                        $formData['zipFilename']
                    ), $tokens
                )
            );
        }

        // Set upload folder
        $objUploadFolder = FilesModel::findByUuid($formData['zipDestinationFolder']);

        // The upload folder could not be found
        if (null === $objUploadFolder) {
            throw new \Exception('Invalid upload folder ID '.$formData['zipDestinationFolder']);
        }

        $uploadFolder = $objUploadFolder->path;

        // Do not overwrite existing files
        if (!empty($formData['zipDoNotOverwrite']) && file_exists($rootDir.'/'.$uploadFolder.'/'.$zipFilename.'.'.$extension)) {
            $offset = 1;

            $tmpAll = Folder::scan($rootDir.'/'.$uploadFolder);
            $tmpFiles = preg_grep('/^'.preg_quote($zipFilename, '/').'.*\.'.preg_quote($extension, '/').'/', $tmpAll);

            foreach ($tmpFiles as $tmpFile) {
                if (preg_match('/__[0-9]+\.'.preg_quote($extension, '/').'$/', $tmpFile)) {
                    $tmpFile = str_replace('.'.$extension, '', $tmpFile);
                    $intValue = (int) substr($zipFilename, (strrpos($tmpFile, '_') + 1));

                    $offset = max($offset, $intValue);
                }
            }

            $zipFilename = str_replace($zipFilename, $zipFilename.'__'.++$offset, $zipFilename);
        }

        // Set zip

        // use php zip ext because of problems with umlauts and other special characters in zipped files with the contao zipwriter
        $objZip =  new \ZipArchive();

        if (true !== $objZip->open($rootDir.'/'.$uploadFolder.'/'.$zipFilename.'.'.$extension, \ZipArchive::CREATE)) {
            throw new \RuntimeException('Cannot open '.$rootDir.'/'.$uploadFolder.'/'.$zipFilename.'.'.$extension);
        }

        foreach ($files as $value) {
            if (\is_array($value)
                && isset($value['uploaded']) && $value['uploaded']
                && isset($value['error']) && 0 === $value['error']
                && isset($value['size']) && 0 < $value['size']
                && isset($value['tmp_name']) && file_exists($value['tmp_name'])
            ) {
                $objZip->addFile(
                    $value['tmp_name'],
                    $value['name']
                );
            }
        }

        $objZip->close();

        // Append new field with zip-file data
        $submittedData['autogeneratedZippedUploads']
            = $submittedData['autogeneretedZippedUploads']
            = $submittedData['autogeneratedZippedUploadsFile']
            = $submittedData['autogeneretedZippedUploadsFile']
            = $uploadFolder.'/'.$zipFilename.'.'.$extension;

        if (!empty($formData['zipDeleteUploadsAfterZip'])) {
            foreach ($files as $value) {
                if (is_file($value['tmp_name'])) {
                    unlink($value['tmp_name']);
                }
            }
            $files = [];
        }

        $zipFile = new File($uploadFolder.'/'.$zipFilename.'.'.$extension);
        $zipFile->chmod(0666 & ~umask());

        $dbafs = Dbafs::addResource($uploadFolder.'/'.$zipFilename.'.'.$extension);

        if (class_exists(\Terminal42\NotificationCenterBundle\ContaoManager\Plugin::class)) {
            if (!isset($formData['nc_notification']) || !is_numeric($formData['nc_notification']) || $formData['nc_notification'] <= 0) {
                return false;
            }

            $file = new File($uploadFolder.'/'.$zipFilename.'.'.$extension);
            $fileItem = \Terminal42\NotificationCenterBundle\BulkyItem\FileItem::fromPath($rootDir.'/'.$file->path, $file->name, $file->mime, $file->filesize);

            $files['autogeneratedZippedUploads'] = $files['autogeneretedZippedUploads']['autogeneratedZippedUploads'] = [
                'name' => $fileItem->getName(),
                'type' => $fileItem->getMimeType(),
                'tmp_name' => $rootDir.'/'.$file->path,
                'error' => 0,
                'size' => $fileItem->getSize(),
                'uploaded' => true,
                'uuid' => $dbafs->uuid,
            ];
        }

        return false;
    }
}
